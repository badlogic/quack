// single line comment

/*
 Multiline comment
*/
module test

import other.mod.name // inline comment
import another.mod.name /** inline multiline
*/

def fun() {
}

def funWithParams(a: i32, b: i32, c: i32) {
}

def funWithParamsAndReturn(a: i32, b: i32, c: i32): i32 {
}

struct Empty {
}

struct Vals {
	val a: i32
	var b: i32
	static var c: i32
}

struct Vals {
	def Vals(a: i32, i:a) {
	}
	
	def vals(): i32 {
	}
}

def fib(n: i32): i32 {
	if (n < 2) {
		return n
	} else {
		return fib(n-1)+fib(n-2)
	}
}

def testIf() {
	if(1) {
	}
	
	if(2) {
	} else {
	}
	
	if(3) {
	} elif(19) {
	} elif(20) {
	}
	
	if(4) {
	} elif(5) {
	} elif(6) {
	} else {
	}
	
	if(7) {
		if(8) {
			if(9) {
			}
		} elif(10) {
		} else {
		}
	} else {
	}
}

def testWhile() {
	while(0) {
	}
}

def testFor() {
	for(val i: i32, val j: i32; i < 0; i=i+1, j=j+1) {
	}
}

def returnWithoutvalue() {
	return
}

def returnWithValue(): i32 {
	return 0
}

def expressions() {
	val i: i32
	var j: MyType
	
	i = 0
	j = 10
	
	a + -b * 2 / 2 % 2 - 10 << 2 + 2 >> 1
	
	a && b || !c
	
	test(a, b, c)
	
	a.b.c[10](a, b, c).field = 10
}

def literals() {
	nil
	true
	false
	2300
	0x23423
	234.0
	10e10
	1340e-23
	'a'
	"String \n\t\r"	
}

def testCast() {
	a + b * cast<MyType>(230 + 2349 * (3 + 4))
}

def testNil() {
	val m: Vals
	m = nil
}

def testInitializer() {
	val m: Vals
	m= Vals(x: 20, y: 42)
}

def testDefaultParams(x: i32=2, y: i32=cos(20 * 39), z: i32) {
	testDefaultParams(x: 10)
	alloc(len * typeof(i32))
}

struct ArrayI32 {
	val len: i32
	val ptr: i64 

	def ArrayI32(len: i32): ArrayI32 {
		self.ptr = alloc(len * sizeof(i32))
		self.len = len
		return self
	}
	def []get (index: i32): i32 {
		return memget32(ptr + index << 2)		
	}
	
	def []set (index: i32, value: i32): i32 {
		memset32(ptr + index << 2, value)
	}
}

def array() {
	val a: ArrayI32	
	a = ArrayI32(10)	
	a[10] = a[2] * 10 + 3
}

def init() {
	val a = 2
	val a: i32 = 3
	var b = Vals(x: 2, y: 3)
}
