/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package com.badlogicgames.quack.parsing;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 9;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int IMPORT = 12;
  /** RegularExpression Id. */
  int MODULE = 13;
  /** RegularExpression Id. */
  int DEF = 14;
  /** RegularExpression Id. */
  int VAL = 15;
  /** RegularExpression Id. */
  int VAR = 16;
  /** RegularExpression Id. */
  int STRUCT = 17;
  /** RegularExpression Id. */
  int IF = 18;
  /** RegularExpression Id. */
  int ELIF = 19;
  /** RegularExpression Id. */
  int ELSE = 20;
  /** RegularExpression Id. */
  int DO = 21;
  /** RegularExpression Id. */
  int WHILE = 22;
  /** RegularExpression Id. */
  int FOR = 23;
  /** RegularExpression Id. */
  int SIZEOF = 24;
  /** RegularExpression Id. */
  int BOOL = 25;
  /** RegularExpression Id. */
  int U8 = 26;
  /** RegularExpression Id. */
  int U16 = 27;
  /** RegularExpression Id. */
  int U32 = 28;
  /** RegularExpression Id. */
  int U64 = 29;
  /** RegularExpression Id. */
  int I8 = 30;
  /** RegularExpression Id. */
  int I16 = 31;
  /** RegularExpression Id. */
  int I32 = 32;
  /** RegularExpression Id. */
  int I64 = 33;
  /** RegularExpression Id. */
  int F32 = 34;
  /** RegularExpression Id. */
  int F64 = 35;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 36;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 37;
  /** RegularExpression Id. */
  int HEX_LITERAL = 38;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 39;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 40;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 41;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 42;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 43;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 44;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 45;
  /** RegularExpression Id. */
  int STRING_LITERAL = 46;
  /** RegularExpression Id. */
  int IDENTIFIER = 47;
  /** RegularExpression Id. */
  int LETTER = 48;
  /** RegularExpression Id. */
  int PART_LETTER = 49;
  /** RegularExpression Id. */
  int LPAREN = 50;
  /** RegularExpression Id. */
  int RPAREN = 51;
  /** RegularExpression Id. */
  int LBRACE = 52;
  /** RegularExpression Id. */
  int RBRACE = 53;
  /** RegularExpression Id. */
  int LBRACKET = 54;
  /** RegularExpression Id. */
  int RBRACKET = 55;
  /** RegularExpression Id. */
  int SEMICOLON = 56;
  /** RegularExpression Id. */
  int COMMA = 57;
  /** RegularExpression Id. */
  int DOT = 58;
  /** RegularExpression Id. */
  int AT = 59;
  /** RegularExpression Id. */
  int ASSIGN = 60;
  /** RegularExpression Id. */
  int LT = 61;
  /** RegularExpression Id. */
  int BANG = 62;
  /** RegularExpression Id. */
  int TILDE = 63;
  /** RegularExpression Id. */
  int HOOK = 64;
  /** RegularExpression Id. */
  int COLON = 65;
  /** RegularExpression Id. */
  int EQ = 66;
  /** RegularExpression Id. */
  int LE = 67;
  /** RegularExpression Id. */
  int GE = 68;
  /** RegularExpression Id. */
  int NE = 69;
  /** RegularExpression Id. */
  int SC_OR = 70;
  /** RegularExpression Id. */
  int SC_AND = 71;
  /** RegularExpression Id. */
  int INCR = 72;
  /** RegularExpression Id. */
  int DECR = 73;
  /** RegularExpression Id. */
  int PLUS = 74;
  /** RegularExpression Id. */
  int MINUS = 75;
  /** RegularExpression Id. */
  int STAR = 76;
  /** RegularExpression Id. */
  int SLASH = 77;
  /** RegularExpression Id. */
  int BIT_AND = 78;
  /** RegularExpression Id. */
  int BIT_OR = 79;
  /** RegularExpression Id. */
  int XOR = 80;
  /** RegularExpression Id. */
  int REM = 81;
  /** RegularExpression Id. */
  int LSHIFT = 82;
  /** RegularExpression Id. */
  int RSHIFT = 83;
  /** RegularExpression Id. */
  int ELLIPSIS = 84;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 1;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 6>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 11>",
    "\"import\"",
    "\"module\"",
    "\"def\"",
    "\"val\"",
    "\"var\"",
    "\"struct\"",
    "\"if\"",
    "\"elif\"",
    "\"else\"",
    "\"do\"",
    "\"while\"",
    "\"for\"",
    "\"sizeof\"",
    "\"bool\"",
    "\"u8\"",
    "\"u16\"",
    "\"u32\"",
    "\"u64\"",
    "\"i8\"",
    "\"i16\"",
    "\"i32\"",
    "\"i64\"",
    "\"f32\"",
    "\"f64\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"<<\"",
    "\">>\"",
    "\"...\"",
    "\">\"",
  };

}
