/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This file has been lifted from https://java.net/projects/javacc/sources/svn/show/trunk/examples/JavaGrammars/1.5?rev=689
 * and heavily modified to suite the needs of Quack. All praise be the Quack!
 */

options {
	LOOKAHEAD = 2;	
	STATIC = false;
	UNICODE_INPUT = true;
	JDK_VERSION = "1.5";
}
PARSER_BEGIN(Parser)
package com.badlogicgames.quack.parsing;

import com.badlogicgames.quack.ast.*;
import java.util.*;

public class Parser {
}
PARSER_END(Parser)

//===========================================================================
// LEXER
//===========================================================================
// Comments & Whitespace
SKIP: { " " | "\t" | "\n" | "\r" | "\f" }

MORE: {
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT |
  "/*" : IN_MULTI_LINE_COMMENT
}

SPECIAL_TOKEN: {
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN: {
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN: {
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE: {
  < ~[] >
}

// Keywords
TOKEN: {
	< IMPORT: "import" > |
	< MODULE: "module" > |
	< DEF: "def" > |
	< VAL: "val" > |
	< VAR: "var" > |	
	< STRUCT: "struct" > |
	< IF: "if" > |
	< ELIF: "elif" > |
	< ELSE: "else" > |
	< DO: "do" > |
	< WHILE: "while" > |
	< FOR: "for" > |
	< SIZEOF: "sizeof" > |
	< TYPEOF: "typeof">
}

// Inbuild Types
TOKEN: {
	< BOOL: "bool" > |

	< U8: "u8" > |
	< U16: "u16" > |
	< U32: "u32" > |
	< U64: "u64" > |
	
	< I8: "i8" > |
	< I16: "i16" > |
	< I32: "i32" > |
	< I64: "i64" > |
	
	< F32: "f32" > |
	< F64: "f64" >
}

// Literals
TOKEN : {
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
      | <HEX_LITERAL> 
      | <OCTAL_LITERAL>
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        <DECIMAL_FLOATING_POINT_LITERAL>
      | <HEXADECIMAL_FLOATING_POINT_LITERAL>
  >
|
  < #DECIMAL_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)?
      | (["0"-"9"])+ <DECIMAL_EXPONENT>
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)?
  >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < #HEXADECIMAL_FLOATING_POINT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT>
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT>
  >
|
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* Identifiers */
TOKEN : {
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [  // all chars for which Character.isIdentifierStart is true         
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
|
  < #PART_LETTER:
      [  // all chars for which Character.isIdentifierPart is true         
         "0"-"9",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
}

// Separators
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

// Operators
TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSHIFT: ">>" >
| < ELLIPSIS: "..." >
}

//===========================================================================
// Parser
//===========================================================================
AstCompilationUnit CompilationUnit():
{	
	AstModule m;
	AstImport i;
	List<AstImport> imports = new ArrayList<AstImport>();
	AstStruct s;
	List<AstStruct> structs = new ArrayList<AstStruct>();
	AstFunction f;
	List<AstFunction> functions = new ArrayList<AstFunction>();
}
{
	m = ModuleDeclaration()
	(i=ImportDeclaration() { imports.add(i); })*	
	(s=StructDefinition() { structs.add(s); } | 
	 f=FunctionDefinition() { functions.add(f); })* 
	{
		AstCompilationUnit cu = new AstCompilationUnit(1, 1); 
		cu.setModule(m);
		cu.getImports().addAll(imports);
		cu.getStructs().addAll(structs);
		cu.getFunctions().addAll(functions);
		return cu; 
	}
}

String ModuleName():
{	
	StringBuilder b = new StringBuilder();
	Token t;	
}
{
	t=<IDENTIFIER> { b.append(t.image); }
	( "." t=<IDENTIFIER> { b.append("."); b.append(t.image); } )*
	{
		return b.toString();
	}
}

AstModule ModuleDeclaration():
{
	Token b;
	String m;
}
{
	b="module" m=ModuleName()
	{
		AstModule module = new AstModule(b.beginLine, b.beginColumn);
		module.setName(m);
		return module;
	}
}

AstImport ImportDeclaration():
{
	Token b;
	String m;
}
{
	b="import" m=ModuleName()
	{ 
		AstImport imp = new AstImport(b.beginLine, b.beginColumn);
		imp.setName(m);
		return imp; 
	}
}

AstStruct StructDefinition():
{
	Token b;
	Token t;
	AstVariable f;
	List<AstVariable> fields = new ArrayList<AstVariable>();
	AstFunction fu;
	List<AstFunction> functions = new ArrayList<AstFunction>();
}
{
	b = "struct" t = <IDENTIFIER> "{" 
		(f=FieldDeclaration() {fields.add(f);})*
		(fu=FunctionDefinition() {functions.add(fu);})*
	"}"
	{
		AstStruct struct = new AstStruct(b.beginLine, b.beginColumn);
		struct.setName(t.image);
		struct.getFields().addAll(fields);
		struct.getFunctions().addAll(functions);
		return struct;
	}	
}

AstVariable FieldDeclaration():
{	
	Token b;
	Token t;
	AstType ty;
}
{
	(b="val"|b="var") t=<IDENTIFIER> ":" ty=Type()	
	{
		AstVariable field = new AstVariable(b.beginLine, b.beginColumn);
		field.setQualifier(b.image.equals("val")?AstVariable.Qualifier.Val:AstVariable.Qualifier.Var);
		field.setName(t.image);
		field.setType(ty);
		return field;
	}
}

AstFunction FunctionDefinition():
{
	Token b;
	Token t;	
	List<AstArgument> args;
	AstType rt = null;	
	List<AstStatement> body;
}
{
	b="def" t=<IDENTIFIER> args=ArgumentList() [":" rt=Type() ] "{"
		body=FunctionBody() 
	"}"
	{
		AstFunction func = new AstFunction(b.beginLine, b.beginColumn);
		func.setName(t.image);
		func.getArguments().addAll(args);
		func.setReturnType(rt);
		func.getBody().addAll(body);
		return func;
	}
}

List<AstArgument> ArgumentList():
{
	List<AstArgument> args = new ArrayList<AstArgument>();
	AstArgument a;
}
{
	"(" [a=Argument() {args.add(a);} ( "," a=Argument() {args.add(a);})*] ")"
	{
		return args;
	}
}

AstArgument Argument():
{
	Token t;
	AstType ty;
}
{
	t=<IDENTIFIER> ":" ty=Type()
	{
		AstArgument arg = new AstArgument(t.beginLine, t.beginColumn);
		arg.setName(t.image);
		arg.setType(ty);
		return arg;
	}
}

List<AstStatement> FunctionBody():
{
	List<AstStatement> stmts;
}
{
	stmts=StatementList()
	{
		return stmts;
	}	
}

List<AstStatement> StatementList():
{
	List<AstStatement> stmts = new ArrayList<AstStatement>();
	AstStatement s;
}
{
	(s=Statement() {stmts.add(s);})*
	{
		return stmts;
	}
}

AstStatement Statement():
{
	AstStatement s;
}
{
	s=VariableDeclaration() |
	s=AssignmentOrExpression() |	
	s=Block() |
	s=IfBlock() |
	s=WhileBlock() |
	s=ForBlock()
	{
		return s;
	}
}

AstVariable VariableDeclaration():
{
	AstVariable v;
}
{
	v=FieldDeclaration()
	{
		return v;
	}
}

AstBlock Block():
{
	Token b;
	List<AstStatement> stmts;
}
{
	b="{" stmts=StatementList() "}"
	{
		AstBlock block = new AstBlock(b.beginLine, b.beginColumn);
		block.getStatements().addAll(stmts);
		return block;
	}
}

AstIf IfBlock():
{
	Token b;
	AstExpression c;
	AstBlock trueBlock;
	Token el;
	AstBlock elseBlock = null;
	List<AstElif> elseIfs = new ArrayList<AstElif>();
	AstElif elif;		
}
{
	b="if" "(" c=Expression() ")" trueBlock=Block()
	(elif=ElseIfBlock() {elseIfs.add(elif);})*
	["else" elseBlock=Block() ]
	{
		AstIf ifNode = new AstIf(b.beginLine, b.beginColumn);
		ifNode.setCondition(c);
		ifNode.setTrueBlock(trueBlock);
		ifNode.getElseIfs().addAll(elseIfs);
		ifNode.setElseBlock(elseBlock);
		return ifNode;
	}
}

AstElif ElseIfBlock():
{
	Token b;
	AstExpression c;
	AstBlock block;
}
{
	b="elif" "(" c=Expression() ")" block=Block() 
	{
		AstElif elif = new AstElif(b.beginLine, b.beginColumn);
		elif.setCondition(c);
		elif.setBlock(block);
		return elif;
	}
}

AstWhile WhileBlock():
{
	Token b;
	AstExpression c;
	AstBlock block;
}
{
	b="while" "(" c=Expression() ")" block=Block()
	{
		AstWhile whileNode = new AstWhile(b.beginLine, b.beginColumn);
		whileNode.setCondition(c);
		whileNode.setBlock(block);
		return whileNode;
	}
}

AstFor ForBlock():
{
	Token t;
	List<AstVariable> i;
	AstExpression e;
	List<AstStatement> b;
	AstBlock block;
}
{
	t="for" "(" i=ForInitializer() ";" e=Expression() ";" b=ForBottom() ")" block=Block()
	{
		AstFor forNode = new AstFor(t.beginLine, t.beginColumn);
		forNode.getInitializers().addAll(i);
		forNode.setCondition(e);
		forNode.getBottom().addAll(b);
		forNode.setBlock(block);
		return forNode;
	}
}

List<AstVariable> ForInitializer():
{
	AstVariable var;
	List<AstVariable> vars = new ArrayList<AstVariable>();
}
{
	[var=VariableDeclaration() {vars.add(var);} ("," var=VariableDeclaration() {vars.add(var);})*]
	{
		return vars;
	}
}

List<AstStatement> ForBottom():
{
	AstExpression e;
	List<AstStatement> stmts = new ArrayList<AstStatement>();
}
{
	[e=AssignmentOrExpression() {stmts.add(e);} ("," e=AssignmentOrExpression() {stmts.add(e);})*]
	{
		return stmts;
	}
}

AstType Type():
{
	Token t;
}
{
	t="bool" |
	t="u8" | t="u16" | t="u32" | t="u64" |
	t="i8" | t="i16" | t="i32" | t="i64" |
	t="f32" | t="f64" |
	t=<IDENTIFIER>
	{
		AstType type = new AstType(t.beginLine, t.beginColumn);
		type.setName(t.image);
		return type;
	} 
}

AstExpression AssignmentOrExpression():
{
	AstExpression lhs;
	AstExpression rhs = null;
}
{
	lhs=Expression() [ "=" rhs=Expression() ]
	{
		if(rhs != null) {
			AstAssign assign = new AstAssign(lhs.getLine(), lhs.getCol());
			assign.setLeftHandSide(lhs);
			assign.setRightHandSide(rhs);
			return assign;
		} else {
			return lhs;
		}
	}
}

AstExpression Expression():
{
	AstExpression e;
}
{	
	e=LogicalExpression()
	{
		return e;
	}
}

void LogicalExpression():
{
	AstExpression first;
	Token op;
	AstExpression e;
}
{
	first=BitExpression() ( (op="||" | op="&&") e=BitExpression() )*
}

void BitExpression():
{}
{
	EqualityExpression() ( ("&" | "|" | "^") EqualityExpression())* 
}

void EqualityExpression():
{}
{
	RelationalExpression() (("==" | "!=") RelationalExpression())*
}

void RelationalExpression():
{}
{
	ShiftExpression() (("<" | ">" | "<=" | ">=") ShiftExpression())*
}

void ShiftExpression():
{}
{
	AddExpression() (("<<" | ">>") AddExpression())*
}

void AddExpression():
{}
{
	MultExpression() (("+" | "-") MultExpression())*
}

void MultExpression():
{}
{
	UnaryExpression() (("*" | "/" | "%") UnaryExpression())*
}

void UnaryExpression():
{}
{
	PostfixExpression() |
	("!" | "+" | "-") UnaryExpression() |
	"typeof" "(" UnaryExpression() ")"
}

void PostfixExpression():
{}
{
	PrimaryExpression() (
		"[" Expression() "]" |
		"(" [ ArgumentExpressionList() ] ")" |
		"." <IDENTIFIER> )*
}

void ArgumentExpressionList():
{}
{
	Expression() ("," Expression())*
}

void PrimaryExpression():
{}
{
	<IDENTIFIER> |
	Constant() |
	"(" Expression() ")"
}

void Constant():
{}
{
	<INTEGER_LITERAL> |
	<FLOATING_POINT_LITERAL> |
	<CHARACTER_LITERAL> |
	<STRING_LITERAL>
}